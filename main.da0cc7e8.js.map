{"version":3,"sources":["scripts/main.js"],"names":["listUl","document","querySelector","employees","querySelectorAll","sortList","list","sortedList","sort","a","b","dataset","salary","slice","split","join","append","getEmployees","map","li","name","textContent"],"mappings":";AAAA,aAsBA,SAAA,EAAA,EAAA,GAAA,IAAA,EAAA,OAAA,KAAA,GAAA,GAAA,OAAA,sBAAA,CAAA,IAAA,EAAA,OAAA,sBAAA,GAAA,IAAA,EAAA,EAAA,OAAA,SAAA,GAAA,OAAA,OAAA,yBAAA,EAAA,GAAA,cAAA,EAAA,KAAA,MAAA,EAAA,GAAA,OAAA,EAAA,SAAA,EAAA,GAAA,IAAA,IAAA,EAAA,EAAA,EAAA,UAAA,OAAA,IAAA,CAAA,IAAA,EAAA,MAAA,UAAA,GAAA,UAAA,GAAA,GAAA,EAAA,EAAA,EAAA,OAAA,IAAA,GAAA,QAAA,SAAA,GAAA,EAAA,EAAA,EAAA,EAAA,MAAA,OAAA,0BAAA,OAAA,iBAAA,EAAA,OAAA,0BAAA,IAAA,EAAA,OAAA,IAAA,QAAA,SAAA,GAAA,OAAA,eAAA,EAAA,EAAA,OAAA,yBAAA,EAAA,MAAA,OAAA,EAAA,SAAA,EAAA,EAAA,EAAA,GAAA,OAAA,KAAA,EAAA,OAAA,eAAA,EAAA,EAAA,CAAA,MAAA,EAAA,YAAA,EAAA,cAAA,EAAA,UAAA,IAAA,EAAA,GAAA,EAAA,EAAA,SAAA,EAAA,GAAA,OAAA,EAAA,IAAA,EAAA,IAAA,EAAA,IAAA,IAAA,SAAA,IAAA,MAAA,IAAA,UAAA,wIAAA,SAAA,EAAA,EAAA,GAAA,GAAA,EAAA,CAAA,GAAA,iBAAA,EAAA,OAAA,EAAA,EAAA,GAAA,IAAA,EAAA,OAAA,UAAA,SAAA,KAAA,GAAA,MAAA,GAAA,GAAA,MAAA,WAAA,GAAA,EAAA,cAAA,EAAA,EAAA,YAAA,MAAA,QAAA,GAAA,QAAA,EAAA,MAAA,KAAA,GAAA,cAAA,GAAA,2CAAA,KAAA,GAAA,EAAA,EAAA,QAAA,GAAA,SAAA,EAAA,GAAA,GAAA,oBAAA,QAAA,OAAA,YAAA,OAAA,GAAA,OAAA,MAAA,KAAA,GAAA,SAAA,EAAA,GAAA,GAAA,MAAA,QAAA,GAAA,OAAA,EAAA,GAAA,SAAA,EAAA,EAAA,IAAA,MAAA,GAAA,EAAA,EAAA,UAAA,EAAA,EAAA,QAAA,IAAA,IAAA,EAAA,EAAA,EAAA,IAAA,MAAA,GAAA,EAAA,EAAA,IAAA,EAAA,GAAA,EAAA,GAAA,OAAA,EApBA,IAAMA,EAASC,SAASC,cAAc,MAChCC,EAAYF,SAASG,iBAAiB,MAEtCC,EAAW,SAACC,GACVC,IAAAA,EAAa,EAAID,GAAME,KAAK,SAACC,EAAGC,GACpC,OAACA,EAAEC,QAAQC,OAAOC,MAAM,GAAGC,MAAM,KAAKC,KAAK,KACxCN,EAAEE,QAAQC,OAAOC,MAAM,GAAGC,MAAM,KAAKC,KAAK,MAG/Cf,EAAOgB,OAAPhB,MAAAA,EAAiBO,EAAAA,KAGbU,EAAe,SAACX,GACb,OAAA,EAAIA,GAAMY,IAAI,SAACC,GAAD,OAAA,EAAA,CACnBC,KAAMD,EAAGE,aACLF,EAAGR,YAIXN,EAASF,GACTc,EAAad","file":"main.da0cc7e8.js","sourceRoot":"../src","sourcesContent":["'use strict';\n\nconst listUl = document.querySelector('ul');\nconst employees = document.querySelectorAll('li');\n\nconst sortList = (list) => {\n  const sortedList = [...list].sort((a, b) => (\n    +b.dataset.salary.slice(1).split(',').join('')\n    - +a.dataset.salary.slice(1).split(',').join('')\n  ));\n\n  listUl.append(...sortedList);\n};\n\nconst getEmployees = (list) => {\n  return [...list].map((li) => ({\n    name: li.textContent,\n    ...(li.dataset),\n  }));\n};\n\nsortList(employees);\ngetEmployees(employees);\n"]}